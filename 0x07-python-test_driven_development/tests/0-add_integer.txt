Test case for 0-add_integer.py
==============================
This is specifically for addition of two numbers
Numbers can either be float or int
The (+) is used to add the two numbers

Example
=======
::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(5, 7)
    12

::

    >>> add_integer(5, -7)
    -2

::

    >>> add_integer(5.0, 7.0)
    12.0

::

    >>> add_integer(-2.9, -0.2)
    -2

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(12)
    110

Non-Digits
===========

"add_integer()" expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
